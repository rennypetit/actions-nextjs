name: CI - Type Check and Deploy

on:
  push:
    branches:
      - '**' # Esto significa CUALQUIER RAMA

jobs:
  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run type check
        run: yarn type-check

  deploy-to-amplify:
    runs-on: ubuntu-latest
    needs: type-check # Este job solo se ejecuta si type-check es exitoso
    outputs:
      amplify_job_id: ${{ steps.trigger_deploy.outputs.job_id }} # Exporta el ID del trabajo de Amplify
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Amplify App ID
        id: get_app_id
        run: |
          set -eux # Habilitar depuración, salir en error, tratar variables no seteadas como error
          APP_ID=$(aws amplify list-apps --query "apps[?name=='${{ secrets.AMPLIFY_APP_NAME }}'].appId" --output text)
          echo "AMPLIFY_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "DEBUG: AMPLIFY_APP_ID set to: $APP_ID"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Wait before triggering deployment
        run: sleep 15 # Espera 15 segundos para evitar LimitExceededException
        shell: bash

      - name: Trigger Amplify Deployment
        id: trigger_deploy # ID para referenciar los outputs de este paso
        run: |
          set -eux # Habilitar depuración, salir en error, tratar variables no seteadas como error
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Triggering Amplify deployment for branch: $BRANCH_NAME"

          # Captura la salida JSON completa primero
          RAW_AMPLIFY_OUTPUT=$(aws amplify start-job --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name $BRANCH_NAME --job-type RELEASE --output json)

          echo "DEBUG: Raw output from aws amplify start-job:"
          echo "$RAW_AMPLIFY_OUTPUT" # Imprime la salida JSON completa para depuración

          # Extrae el jobId usando jq con el path CORRECTO
          JOB_ID=$(echo "$RAW_AMPLIFY_OUTPUT" | jq -r '.jobSummary.jobId') # <--- CAMBIO AQUÍ

          echo "DEBUG: Extracted JOB_ID using jq: '$JOB_ID'" # Muestra el valor extraído

          # Valida que JOB_ID no esté vacío o sea "null"
          if [ -z "$JOB_ID" ] || [ "$JOB_ID" == "null" ]; then
            echo "Error: Failed to get a valid Amplify Job ID. Raw output might be malformed or empty."
            exit 1 # Falla el job si no se obtiene un JOB_ID válido
          fi

          echo "Amplify Job ID: $JOB_ID"
          echo "job_id=$JOB_ID" >> "$GITHUB_OUTPUT" # Guarda el JOB_ID como output del paso
          echo "DEBUG: Content of GITHUB_OUTPUT after writing: $(cat "$GITHUB_OUTPUT")" # Verifica lo que se escribió
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

  poll-amplify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-to-amplify # Este job se ejecuta después de que deploy-to-amplify haya terminado
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Amplify App ID for Polling
        id: get_app_id_poll
        run: |
          set -eux # Habilitar depuración, salir en error, tratar variables no seteadas como error
          APP_ID=$(aws amplify list-apps --query "apps[?name=='${{ secrets.AMPLIFY_APP_NAME }}'].appId" --output text)
          echo "AMPLIFY_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "DEBUG: AMPLIFY_APP_ID set to: $APP_ID"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Poll Amplify Deployment Status
        run: |
          set -eux # Habilitar depuración, salir en error, tratar variables no seteadas como error
          APP_ID="${{ env.AMPLIFY_APP_ID }}"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          JOB_ID="${{ needs.deploy-to-amplify.outputs.amplify_job_id }}" # Accede al output del job anterior

          echo "DEBUG: JOB_ID received in polling job: '$JOB_ID'" # Muestra el JOB_ID recibido

          echo "Polling Amplify deployment for App ID: $APP_ID, Branch: $BRANCH_NAME, Job ID: $JOB_ID"

          MAX_ATTEMPTS=60 # Máximo 10 minutos (60 * 10 segundos de espera)
          ATTEMPT=0
          STATUS=""

          while [ "$STATUS" != "SUCCEEDED" ] && [ "$STATUS" != "FAILED" ] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Intento $ATTEMPT: Comprobando estado..."
            
            # Asegúrate de que JOB_ID no esté vacío antes de llamar a get-job
            if [ -z "$JOB_ID" ] || [ "$JOB_ID" == "null" ]; then
              echo "Error: El ID del trabajo de Amplify no se pudo obtener del job anterior o es inválido. Abortando polling."
              exit 1
            fi

            JOB_DETAILS=$(aws amplify get-job --app-id "$APP_ID" --branch-name "$BRANCH_NAME" --job-id "$JOB_ID" --query "job" --output json)
            
            echo "DEBUG: JOB_DETAILS raw output: '$JOB_DETAILS'" # Muestra la salida cruda de get-job

            STATUS=$(echo "$JOB_DETAILS" | jq -r '.status')
            
            echo "Estado actual: $STATUS"

            if [ "$STATUS" == "FAILED" ]; then
              echo "¡El despliegue de Amplify FALLÓ!"
              exit 1 # Falla el job de GitHub Actions
            fi

            if [ "$STATUS" == "SUCCEEDED" ]; then
              echo "¡El despliegue de Amplify FUE EXITOSO!"
              break
            fi

            sleep 10 # Espera 10 segundos antes de la siguiente comprobación
          done

          if [ "$STATUS" != "SUCCEEDED" ]; then
            echo "El despliegue de Amplify no finalizó con éxito dentro del tiempo máximo."
            exit 1 # Falla el job de GitHub Actions si se agotó el tiempo
          fi
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
